// this file is auto generated.
import {Client} from './client'

{% for i in struct %}
{% set ts = i.code(coder.typescript) %}
// {{ i.desc }}
export interface {{ ts.struct_name }} {
    {{ ts.struct_params.join('\n    ') | safe }}
}
{% endfor %}

export class {{ util.makeUpperCamelCase(name, "-") }}{
    static libname: string = "javascript client"
    static version: string = "{{ version }}"
    static hash: string = "{{ document.hash }}"
    client: Client
    constructor(client: Client){
        this.client = client
        this.client.subscribe.on('close', () => { this.onClose() })
    }
{%- for i in request -%}
{%- if i.dir === 0 -%}
    {% set ts = i.code(coder.typescript) %}
    // {{ i.desc }}
    public {{ ts.func_name }} ( {{ ts.func_params.join(", ") | safe}} ): Promise<{{ ts.func_return | safe}}> {
        return this.client.request("{{ ts.request_name }}", [ {{ ts.params.join(", ") }} ])
    }
{%- endif -%}
{%- endfor %}

    onClose(): void{
        const list: Array<string> = []
{%- for i in notification -%}
{% if i.dir === 1 %}
        list.push("{{ i.name }}")
{%- endif -%}
{%- endfor %}
        list.forEach(event => this.client.subscribe.removeAllListeners(event))
    }
}

export namespace validate {
{%- for i in struct %}
{%- set ts = i.code(coder.typescript) %}
    export const {{ ts.struct_name }} = ( obj: object ): boolean => {
{%- for j in i.storage %}
        if(!( '{{ j.name }}' in obj )){
            return false;
        }
{%- endfor %}
        return true;
    }
{%- endfor %}
}

